{"version":3,"sources":["assets/tripduration.svg","assets/closeststation.svg","assets/arrivaltime.svg","components/IconTextPair/IconTextPair.jsx","components/Header/Header.jsx","components/Footer/Footer.jsx","components/TrainLineItem/TrainLineItem.jsx","components/TrainLineList/TrainLineList.jsx","components/LineIndicators/LineIndicators.jsx","util/useGeolocation.js","util/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IconTextPair","_ref","icon","children","react_default","a","createElement","className","src","Header","actualClosestStation","closeststation","actualTripDuration","tripduration","actualArrivalTime","arrivaltime","components_IconTextPair_IconTextPair","locationicon","durationicon","arrivalicon","Footer","dayjs","extend","relativeTime","regex","TrainLineItem","line","origintime","extractedTime","exec","dayTime","hour","parseInt","minute","diff","TrainLineList","actualTrainLines","trainlines","map","tl","components_TrainLineItem_TrainLineItem","LineIndicators","getlines","lines","uniqueLines","Object","toConsumableArray","Set","uln","concat","split","useGeolocation","watchId","_useState","useState","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","timestamp","Date","now","_useState2","slicedToArray","state","setState","mounted","onEvent","event","coords","useEffect","navigator","geolocation","getCurrentPosition","watchPosition","clearWatch","useInterval","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","parenRegex","App","settripduration","_useState3","_useState4","setarrivaltime","_useState5","_useState6","settrainlines","_useState7","_useState8","_useGeolocation","_useState9","_useState10","setuserlocation","_useState11","_useState12","originstation","setoriginstation","cmd","dest","getAndSetTrainLines","asyncToGenerator","regenerator_default","mark","_callee","_ref2","_trainlines","_arrivaltime","_tripduration","wrap","_context","prev","next","getTrainLines","sent","stop","apply","this","arguments","_getTrainLines","_callee2","parsed","res","trips","_context2","ky","get","json","console","log","root","schedule","request","trip","leg","abrupt","stationdistances","bartdata","features","feat","place1","place2","toRad","x","Math","PI","lat1","lon1","lat2","lon2","dLat","dLon","sin","cos","atan2","sqrt","distance","geometry","coordinates","reverse","indexOf","min","properties","Name","Fragment","components_Header_Header","components_LineIndicators_LineIndicators","components_TrainLineList_TrainLineList","components_Footer_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4541b41b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tripduration.9f5a97ef.svg\";","module.exports = __webpack_public_path__ + \"static/media/closeststation.a87d7fbd.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrivaltime.adc83e09.svg\";","import React from \"react\";\n\nimport \"./IconTextPair.sass\";\n\nfunction IconTextPair({ icon, children }) {\n  return (\n    <span className=\"IconTextPair\">\n      <img src={icon} />\n      <span>{children}</span>\n    </span>\n  );\n}\n\nexport default IconTextPair;\n","import React from \"react\";\nimport IconTextPair from \"../IconTextPair/IconTextPair\";\n\nimport durationicon from \"../../assets/tripduration.svg\";\nimport locationicon from \"../../assets/closeststation.svg\";\nimport arrivalicon from \"../../assets/arrivaltime.svg\";\nimport \"./Header.sass\";\n\nfunction Header({ closeststation, tripduration, arrivaltime }) {\n  const actualClosestStation = closeststation || \"-- --\";\n  const actualTripDuration = tripduration || \"-- --\";\n  const actualArrivalTime = arrivaltime || \"-- --\";\n  return (\n    <div className=\"Header\">\n      <IconTextPair icon={locationicon}>{actualClosestStation}</IconTextPair>\n      <IconTextPair icon={durationicon}>{actualTripDuration} min</IconTextPair>\n      <IconTextPair icon={arrivalicon}>{actualArrivalTime}</IconTextPair>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nimport \"./Footer.sass\";\n\nfunction Footer() {\n  return null;\n  //return <p>Footer</p>;\n}\n\nexport default Footer;\n","import React from \"react\";\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport \"./TrainLineItem.sass\";\n\ndayjs.extend(relativeTime);\n\nconst regex = /(\\d{1,2}):(\\d{2}) (AM|PM)/;\nfunction TrainLineItem({ line, origintime }) {\n  if (!origintime) {\n    return <div className=\"TrainLineItem\">—</div>;\n  }\n  const extractedTime = regex.exec(origintime);\n\n  const dayTime = dayjs()\n    .hour(parseInt(extractedTime[1]) + (extractedTime[3] === \"PM\" ? 12 : 0))\n    .minute(extractedTime[2]);\n\n  return (\n    <div className=\"TrainLineItem\">\n      {/* {dayjs().diff(dayTime, \"minute\")} */}\n      {dayjs(dayTime).diff(dayjs(), \"minute\")} min\n      {/* {dayTime.fromNow()} */}\n    </div>\n  );\n}\n\nexport default TrainLineItem;\n","import React from \"react\";\nimport TrainLineItem from \"../TrainLineItem/TrainLineItem\";\n\nimport \"./TrainLineList.sass\";\n\nfunction TrainLineList({ trainlines }) {\n  const actualTrainLines = trainlines || [{}, {}, {}];\n\n  return (\n    <div className=\"TrainLineList\">\n      {/* <span className=\"NextTrain\">Next Train</span> */}\n      {actualTrainLines.map(tl => {\n        return <TrainLineItem {...tl} />;\n      })}\n    </div>\n  );\n}\n\nexport default TrainLineList;\n","import React from \"react\";\n\nimport \"./LineIndicators.sass\";\n\nfunction LineIndicators({ trainlines }) {\n  const actualTrainLines = trainlines || [\n    { line: \"ROUTE 0\" },\n    { line: \"ROUTE 0\" },\n    { line: \"ROUTE 0\" }\n  ];\n\n  const getlines = actualTrainLines.map(lines => lines.line);\n\n  const uniqueLines = [...new Set(getlines)];\n\n  return (\n    <div className=\"LineIndicators\">\n      {uniqueLines.map(uln => {\n        return (\n          <div\n            className={`LineIndicator LineIndicator--${uln.split(\" \")[1]}`}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default LineIndicators;\n","import { useState, useEffect } from \"react\";\n\nconst useGeolocation = () => {\n  const [state, setState] = useState({\n    accuracy: null,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    latitude: null,\n    longitude: null,\n    speed: null,\n    timestamp: Date.now()\n  });\n  let mounted = true;\n  let watchId;\n\n  const onEvent = event => {\n    if (mounted) {\n      setState({\n        accuracy: event.coords.accuracy,\n        altitude: event.coords.altitude,\n        altitudeAccuracy: event.coords.altitudeAccuracy,\n        heading: event.coords.heading,\n        latitude: event.coords.latitude,\n        longitude: event.coords.longitude,\n        speed: event.coords.speed,\n        timestamp: event.timestamp\n      });\n    }\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(onEvent);\n    watchId = navigator.geolocation.watchPosition(onEvent);\n\n    return () => {\n      mounted = false;\n      navigator.geolocation.clearWatch(watchId);\n    };\n  }, [0]);\n\n  return state;\n};\n\nexport default useGeolocation;\n","import { useEffect, useRef } from \"react\";\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useState, useEffect } from \"react\";\nimport ky from \"ky\";\n\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport TrainLineList from \"./components/TrainLineList/TrainLineList\";\nimport LineIndicators from \"./components/LineIndicators/LineIndicators\";\n\nimport \"./App.sass\";\nimport useGeolocation from \"./util/useGeolocation\";\nimport useInterval from \"./util/useInterval\";\n\nimport bartdata from \"./assets/bart.json\";\n\nfunction distance(place1, place2) {\n  function toRad(x) {\n    return (x * Math.PI) / 180;\n  }\n  var lat1 = place1[0];\n  var lon1 = place1[1];\n  var lat2 = place2[0];\n  var lon2 = place2[0];\n\n  var R = 6371;\n  var x1 = lat2 - lat1;\n  var dLat = toRad(x1);\n  var x2 = lon2 - lon1;\n  var dLon = toRad(x2);\n  var a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRad(lat1)) *\n      Math.cos(toRad(lat2)) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d;\n}\n\nvar parenRegex = /(?<=\\().+?(?=\\))/;\n\nfunction App() {\n  const [tripduration, settripduration] = useState(null);\n  const [arrivaltime, setarrivaltime] = useState(null);\n\n  const [trainlines, settrainlines] = useState(null);\n  const [lineindicators, setlineindicators] = useState(null);\n\n  const { latitude, longitude } = useGeolocation();\n  const [userlocation, setuserlocation] = useState(null);\n  const [originstation, setoriginstation] = useState(null);\n\n  const cmd = \"DEPART\";\n  const dest = \"19th\";\n  const a = \"3\";\n\n  const getAndSetTrainLines = async () => {\n    if (originstation) {\n      const bartRes = await getTrainLines();\n      const { trainlines, arrivaltime, tripduration } = await getTrainLines();\n      settrainlines(trainlines);\n      setarrivaltime(arrivaltime);\n      settripduration(tripduration);\n    }\n  };\n\n  async function getTrainLines() {\n    const parsed = await ky.get(\n      `http://api.bart.gov/api/sched.aspx?cmd=${cmd}&orig=${originstation}&dest=${dest}&date=now&key=MW9S-E7SL-26DU-VV8V&b=0&a=${a}&json=y`\n    );\n\n    const res = await parsed.json();\n    console.log(res);\n\n    const trips = res.root.schedule.request.trip;\n\n    const tripduration = trips[0][\"@tripTime\"];\n    const arrivaltime = trips[0][\"@destTimeMin\"];\n    const trainlines = trips.map(trip => ({\n      origintime: trip.leg[0][\"@origTimeMin\"],\n      line: trip.leg[0][\"@line\"]\n    }));\n\n    return {\n      trainlines,\n      arrivaltime,\n      tripduration\n    };\n  }\n\n  useEffect(() => {\n    setuserlocation([latitude, longitude]);\n    const stationdistances = bartdata.features.map(feat => {\n      return distance(\n        [latitude, longitude],\n        [feat.geometry.coordinates[0], feat.geometry.coordinates[1]]\n      );\n    });\n    setoriginstation(\n      parenRegex.exec(\n        bartdata.features[\n          stationdistances.reverse().indexOf(Math.min(...stationdistances))\n        ].properties.Name\n      )[0]\n    );\n  }, [latitude, longitude]);\n\n  useEffect(() => {\n    getAndSetTrainLines();\n  }, [originstation]);\n\n  useInterval(getAndSetTrainLines, 60 * 1000);\n\n  return (\n    <>\n      <Header\n        closeststation={originstation}\n        tripduration={tripduration}\n        arrivaltime={arrivaltime}\n      />\n      {/* {latitude}, {longitude} */}\n      <LineIndicators trainlines={trainlines} />\n      <TrainLineList trainlines={trainlines} />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.sass\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}